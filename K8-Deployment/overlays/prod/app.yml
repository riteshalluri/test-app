apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  labels:
    app: app
  spec:
  replicas: 10
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      # Create a volume called 'shared-logs' that the
      # app and sidecar share.
      volumes:
      - name: shared-logs 
        emptyDir: {}
      containers:
      - name: flask-app
        image: 23465783733.dkr.ecr.ap-southeast-2.amazonaws.com/appImage:latest
        imagePullPolicy: Never

        # appbackend application: write the current date
        # to the log file every five seconds
        command: ["/bin/sh"]
        args: ["-c", "while true; do date >> /var/log/app.txt; sleep 5;done"]

        # Mount the pod's shared log file into the app 
        # container. The app writes logs here.
        volumeMounts:
        - name: shared-logs
          mountPath: /var/log

        ports:
        - containerPort: 80
       
        ### Sidecar container and volume mount to access the logs 
        - name: sidecar
          image: centos/httpd
          ports:
          - containerPort: 8080
          volumeMounts:
          - name: Shared logs
            mountPath: /var/www/html

        ## Startup, liveness and readiness probe
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          failureThreshold: 30
          periodSeconds: 10
        args:
        - /bin/sh
        - -c
        - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/healthy
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /health/startup
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
 name: front-service
spec:
 type: LoadBalancer
 selector:
   app: appfrontend
 ports:
 - port: 3000
   targetPort: 80
   nodePort: 32000
